"""
Highly divisible triangular number
Problem 12
"""

import math # for sqrt function

# HELPER FUNCTIONS

def triangle_num(ind):
    """
    given index
    returns triangle number in that position
    """
    triangle_num = 0
    for num in range(1, ind+1):
        triangle_num += num

    return triangle_num

# test case
# we know: 7th traingle number == 28, 5th triangle number == 15
# print(triangle_num(7), triangle_num(5))

# expected output:
# 28 15

# acutal output:
# 28 15

def num_factors(num):
    """
    given num
    returns number of factors
    """

    current_check = 1
    num_of_factors = 0

    while current_check < math.sqrt(num):
        if num % current_check == 0:
            num_of_factors += 2 # accounts for both values
        current_check += 1

    # for compare in range(1, num+1): # unnecessary checks beyond sqrt(num)
    #     if num % compare == 0: # no longer need to create + store all values in list via range
    #         num_of_factors += 1

    return num_of_factors

# test case
# we know: 7th triangle number has 6 factors, 5th triangle number has 4 factors
# print(factors(triangle_num(7)), factors(triangle_num(5)))

# expected output:
# 6 4

# acutal output:
# 6 4

# MAIN FUNCTION

def find_triangle_num_v1(factors): # slow
    """
    given number of factors
    returns first triangle number that has over number of factors
    """

    #utilize helper functions
    current_check = 1
    while True:
        num = triangle_num(current_check)
        number_of_factors = num_factors(num)
        print(num, number_of_factors)
        if number_of_factors > factors:
            return triangle_num
        current_check += 1

# CONDENSED FUNCTION

def find_triangle_num_v2(factors):
    """
    given number of factors
    return first triangle nubmer that has over number of factors
    """
    current_check = 1 # latest triangle number in sequence
    next_inc = 2
    while True:

        number_of_factors = num_factors(current_check)
        print(current_check, number_of_factors)
        if number_of_factors > factors:
            return (current_check, 'has', number_of_factors, 'number of factors')


        current_check += next_inc # increments to next triangle number in sequence
        next_inc += 1



"""
QUESTIONS / SOLUTIONS
"""

# the sequence of triangle nubmers is generated by adding the natural numbers
# 7th triangle number would be:
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

# the first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# list of first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# 28 i sthe first triangle number to have over five divisors
# what is the value of the first triangle number to have over five hundred divisors

print('\n')
print('what is the value of the first triangle number to have over five hundred divisors')
print(find_triangle_num_v2(500))
